\begin{defproblem}{rotinas-gna_SEED_}

  Em cada um dos diagramas de fluxo abaixo está representado o
  algoritmo para geração de números da variável aleatória discreta
  $X$, cuja distribuição de probabilidades está na tabela abaixo.

  \begin{center}
    \begin{tabular*}{0.1\linewidth}[h]{rr}
      \hline
      $x$ & $\Pr(X)$\\ \hline
      1 & 0.1 \\
      2 & 0.3 \\
      3 & 0.6 \\ \hline
    \end{tabular*}
  \end{center}

  \begin{center}
    \includegraphics[scale=0.75]{rotinas}
  \end{center}

  Algum dos algortimos é mais eficiente para geração de números de
  $X$? Se sim, qual deles é o melhor e por que? Implemente em R a função
  correspondente ao melhor algoritmo.

  \begin{onlysolution}
    \begin{solution}

      O 2 vai passar pelo if uma vez só em 60\%, dos 40\% restantes, 3/4
      ele vai passar duas vezes e 1/4 ele vai passar 3 vezes. Sendo
      assim, se o curso do if é de 1 unidade de custo, o custo teórico
      do 2 é menor.

<<eval = FALSE, include = FALSE>>=
# Custo do 1.
0.1 * 1 + (0.9 * 3/9 * 2 + 0.9 * 6/9 * 3)

# Custo do 2.
0.6 * 1 + (0.4 * 3/4 * 2 + 0.4 * 1/4 * 3)

a1 <- function() {
    x <- 1:3
    px <- c(0.1, 0.3, 0.6)
    i <- 1
    P <- px[i]
    u <- runif(1)
    while (u >= P) {
        i <- 1 + 1
        P <- P + px[i]
    }
    return(x[i])
}

a2 <- function() {
    x <- 3:1
    px <- c(0.6, 0.3, 0.1)
    i <- 1
    P <- px[i]
    u <- runif(1)
    while (u >= P) {
        i <- 1 + 1
        P <- P + px[i]
    }
    return(x[i])
}

# 2.5/1.5

library(rbenchmark)

benchmark(replicate(10000, a1()),
          replicate(10000, a2()), replications = 50)

@
    \end{solution}
  \end{onlysolution}

\end{defproblem}
